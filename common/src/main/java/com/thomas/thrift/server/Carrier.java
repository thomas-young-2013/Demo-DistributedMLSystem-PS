/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thomas.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-17")
public class Carrier implements org.apache.thrift.TBase<Carrier, Carrier._Fields>, java.io.Serializable, Cloneable, Comparable<Carrier> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Carrier");

  private static final org.apache.thrift.protocol.TField ITERATION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("iterationNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GRADIENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("gradients", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CarrierStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CarrierTupleSchemeFactory();

  public int iterationNum; // required
  public java.util.List<java.util.List<Double>> gradients; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITERATION_NUM((short)1, "iterationNum"),
    GRADIENTS((short)2, "gradients");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITERATION_NUM
          return ITERATION_NUM;
        case 2: // GRADIENTS
          return GRADIENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITERATIONNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITERATION_NUM, new org.apache.thrift.meta_data.FieldMetaData("iterationNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GRADIENTS, new org.apache.thrift.meta_data.FieldMetaData("gradients", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Carrier.class, metaDataMap);
  }

  public Carrier() {
  }

  public Carrier(
    int iterationNum,
    java.util.List<java.util.List<Double>> gradients)
  {
    this();
    this.iterationNum = iterationNum;
    setIterationNumIsSet(true);
    this.gradients = gradients;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Carrier(Carrier other) {
    __isset_bitfield = other.__isset_bitfield;
    this.iterationNum = other.iterationNum;
    if (other.isSetGradients()) {
      java.util.List<java.util.List<Double>> __this__gradients = new java.util.ArrayList<java.util.List<Double>>(other.gradients.size());
      for (java.util.List<Double> other_element : other.gradients) {
        java.util.List<Double> __this__gradients_copy = new java.util.ArrayList<Double>(other_element);
        __this__gradients.add(__this__gradients_copy);
      }
      this.gradients = __this__gradients;
    }
  }

  public Carrier deepCopy() {
    return new Carrier(this);
  }

  @Override
  public void clear() {
    setIterationNumIsSet(false);
    this.iterationNum = 0;
    this.gradients = null;
  }

  public int getIterationNum() {
    return this.iterationNum;
  }

  public Carrier setIterationNum(int iterationNum) {
    this.iterationNum = iterationNum;
    setIterationNumIsSet(true);
    return this;
  }

  public void unsetIterationNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ITERATIONNUM_ISSET_ID);
  }

  /** Returns true if field iterationNum is set (has been assigned a value) and false otherwise */
  public boolean isSetIterationNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ITERATIONNUM_ISSET_ID);
  }

  public void setIterationNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ITERATIONNUM_ISSET_ID, value);
  }

  public int getGradientsSize() {
    return (this.gradients == null) ? 0 : this.gradients.size();
  }

  public java.util.Iterator<java.util.List<Double>> getGradientsIterator() {
    return (this.gradients == null) ? null : this.gradients.iterator();
  }

  public void addToGradients(java.util.List<Double> elem) {
    if (this.gradients == null) {
      this.gradients = new java.util.ArrayList<java.util.List<Double>>();
    }
    this.gradients.add(elem);
  }

  public java.util.List<java.util.List<Double>> getGradients() {
    return this.gradients;
  }

  public Carrier setGradients(java.util.List<java.util.List<Double>> gradients) {
    this.gradients = gradients;
    return this;
  }

  public void unsetGradients() {
    this.gradients = null;
  }

  /** Returns true if field gradients is set (has been assigned a value) and false otherwise */
  public boolean isSetGradients() {
    return this.gradients != null;
  }

  public void setGradientsIsSet(boolean value) {
    if (!value) {
      this.gradients = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITERATION_NUM:
      if (value == null) {
        unsetIterationNum();
      } else {
        setIterationNum((Integer)value);
      }
      break;

    case GRADIENTS:
      if (value == null) {
        unsetGradients();
      } else {
        setGradients((java.util.List<java.util.List<Double>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITERATION_NUM:
      return getIterationNum();

    case GRADIENTS:
      return getGradients();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITERATION_NUM:
      return isSetIterationNum();
    case GRADIENTS:
      return isSetGradients();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Carrier)
      return this.equals((Carrier)that);
    return false;
  }

  public boolean equals(Carrier that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_iterationNum = true;
    boolean that_present_iterationNum = true;
    if (this_present_iterationNum || that_present_iterationNum) {
      if (!(this_present_iterationNum && that_present_iterationNum))
        return false;
      if (this.iterationNum != that.iterationNum)
        return false;
    }

    boolean this_present_gradients = true && this.isSetGradients();
    boolean that_present_gradients = true && that.isSetGradients();
    if (this_present_gradients || that_present_gradients) {
      if (!(this_present_gradients && that_present_gradients))
        return false;
      if (!this.gradients.equals(that.gradients))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + iterationNum;

    hashCode = hashCode * 8191 + ((isSetGradients()) ? 131071 : 524287);
    if (isSetGradients())
      hashCode = hashCode * 8191 + gradients.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Carrier other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIterationNum()).compareTo(other.isSetIterationNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIterationNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iterationNum, other.iterationNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGradients()).compareTo(other.isSetGradients());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGradients()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gradients, other.gradients);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Carrier(");
    boolean first = true;

    sb.append("iterationNum:");
    sb.append(this.iterationNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gradients:");
    if (this.gradients == null) {
      sb.append("null");
    } else {
      sb.append(this.gradients);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CarrierStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CarrierStandardScheme getScheme() {
      return new CarrierStandardScheme();
    }
  }

  private static class CarrierStandardScheme extends org.apache.thrift.scheme.StandardScheme<Carrier> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Carrier struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITERATION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iterationNum = iprot.readI32();
              struct.setIterationNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GRADIENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.gradients = new java.util.ArrayList<java.util.List<Double>>(_list0.size);
                java.util.List<Double> _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  {
                    org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                    _elem1 = new java.util.ArrayList<Double>(_list3.size);
                    double _elem4;
                    for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                    {
                      _elem4 = iprot.readDouble();
                      _elem1.add(_elem4);
                    }
                    iprot.readListEnd();
                  }
                  struct.gradients.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setGradientsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Carrier struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITERATION_NUM_FIELD_DESC);
      oprot.writeI32(struct.iterationNum);
      oprot.writeFieldEnd();
      if (struct.gradients != null) {
        oprot.writeFieldBegin(GRADIENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.gradients.size()));
          for (java.util.List<Double> _iter6 : struct.gradients)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter6.size()));
              for (double _iter7 : _iter6)
              {
                oprot.writeDouble(_iter7);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CarrierTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CarrierTupleScheme getScheme() {
      return new CarrierTupleScheme();
    }
  }

  private static class CarrierTupleScheme extends org.apache.thrift.scheme.TupleScheme<Carrier> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Carrier struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIterationNum()) {
        optionals.set(0);
      }
      if (struct.isSetGradients()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetIterationNum()) {
        oprot.writeI32(struct.iterationNum);
      }
      if (struct.isSetGradients()) {
        {
          oprot.writeI32(struct.gradients.size());
          for (java.util.List<Double> _iter8 : struct.gradients)
          {
            {
              oprot.writeI32(_iter8.size());
              for (double _iter9 : _iter8)
              {
                oprot.writeDouble(_iter9);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Carrier struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.iterationNum = iprot.readI32();
        struct.setIterationNumIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.gradients = new java.util.ArrayList<java.util.List<Double>>(_list10.size);
          java.util.List<Double> _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            {
              org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
              _elem11 = new java.util.ArrayList<Double>(_list13.size);
              double _elem14;
              for (int _i15 = 0; _i15 < _list13.size; ++_i15)
              {
                _elem14 = iprot.readDouble();
                _elem11.add(_elem14);
              }
            }
            struct.gradients.add(_elem11);
          }
        }
        struct.setGradientsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

